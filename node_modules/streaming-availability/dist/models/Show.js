"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShowToJSON = exports.ShowFromJSONTyped = exports.ShowFromJSON = exports.instanceOfShow = exports.ShowTypeEnum = void 0;
var runtime_1 = require("../runtime");
var Genre_1 = require("./Genre");
var Season_1 = require("./Season");
var SeriesStatus_1 = require("./SeriesStatus");
/**
 * @export
 */
exports.ShowTypeEnum = {
    Movie: 'movie',
    Series: 'series'
};
/**
 * Check if a given object implements the Show interface.
 */
function instanceOfShow(value) {
    var isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "overview" in value;
    isInstance = isInstance && "imdbId" in value;
    isInstance = isInstance && "tmdbId" in value;
    isInstance = isInstance && "originalTitle" in value;
    isInstance = isInstance && "genres" in value;
    isInstance = isInstance && "cast" in value;
    isInstance = isInstance && "streamingInfo" in value;
    return isInstance;
}
exports.instanceOfShow = instanceOfShow;
function ShowFromJSON(json) {
    return ShowFromJSONTyped(json, false);
}
exports.ShowFromJSON = ShowFromJSON;
function ShowFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'type': json['type'],
        'title': json['title'],
        'overview': json['overview'],
        'year': !(0, runtime_1.exists)(json, 'year') ? undefined : json['year'],
        'firstAirYear': !(0, runtime_1.exists)(json, 'firstAirYear') ? undefined : json['firstAirYear'],
        'lastAirYear': !(0, runtime_1.exists)(json, 'lastAirYear') ? undefined : json['lastAirYear'],
        'imdbId': json['imdbId'],
        'tmdbId': json['tmdbId'],
        'originalTitle': json['originalTitle'],
        'genres': (json['genres'].map(Genre_1.GenreFromJSON)),
        'directors': !(0, runtime_1.exists)(json, 'directors') ? undefined : json['directors'],
        'creators': !(0, runtime_1.exists)(json, 'creators') ? undefined : json['creators'],
        'cast': json['cast'],
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : (0, SeriesStatus_1.SeriesStatusFromJSON)(json['status']),
        'seasonCount': !(0, runtime_1.exists)(json, 'seasonCount') ? undefined : json['seasonCount'],
        'episodeCount': !(0, runtime_1.exists)(json, 'episodeCount') ? undefined : json['episodeCount'],
        'streamingInfo': json['streamingInfo'],
        'seasons': !(0, runtime_1.exists)(json, 'seasons') ? undefined : (json['seasons'].map(Season_1.SeasonFromJSON)),
    };
}
exports.ShowFromJSONTyped = ShowFromJSONTyped;
function ShowToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'type': value.type,
        'title': value.title,
        'overview': value.overview,
        'year': value.year,
        'firstAirYear': value.firstAirYear,
        'lastAirYear': value.lastAirYear,
        'imdbId': value.imdbId,
        'tmdbId': value.tmdbId,
        'originalTitle': value.originalTitle,
        'genres': (value.genres.map(Genre_1.GenreToJSON)),
        'directors': value.directors,
        'creators': value.creators,
        'cast': value.cast,
        'status': (0, SeriesStatus_1.SeriesStatusToJSON)(value.status),
        'seasonCount': value.seasonCount,
        'episodeCount': value.episodeCount,
        'streamingInfo': value.streamingInfo,
        'seasons': value.seasons === undefined ? undefined : (value.seasons.map(Season_1.SeasonToJSON)),
    };
}
exports.ShowToJSON = ShowToJSON;
